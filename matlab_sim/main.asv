clear all
close all
% Final Project Simulation


%% User Input
radio_type = 0; % 0 FM radio, 1 Handheld Radio


%% Frequency definition
if radio_type
    f_center = 462.9e6; %Hz
    bw = 3.2e6;
    f_start = f_center - bw/2;
    f_end = f_center + bw/2;

    n = 128; %Number of Channels
    m = 104; %Down sample ratio
    chan_size = bw/n;

    % Get Taps
    fid = fopen("filter_taps.h",'r');
    taps = fscanf(fid,'%d\n')';
    fclose(fid);

    data_file = 'recorded_data_bytes.txt';
    input_data = convert_2_IQ(data_file);
    target_chan = 117;
    BB_offset = -1788;
    

else
    f_center = 93e6; %Hz
    bw = 3.2e6;
    f_start = f_center - bw/2;
    f_end = f_center + bw/2;

    n = 16; %Number of Channels
    m = 13; %Down sample ratio
    chan_size = bw/n;
    
    % Get Taps
    fid = fopen("filter_taps_radio.h",'r');
    taps = fscanf(fid,'%d\n')';
    fclose(fid);

    data_file = 'recorded_data_bytes_radio.txt';
    input_data = convert_2_IQ(data_file);
    target_chan = 3;

    BB_offset = 0;


end


%% Generate spectrum
T = 1/bw;

%Shift spectrum
T_end = length(input_data)*T;
dt = [T:T:T_end];
input_data = input_data .* exp(1i*2*pi*chan_size/2*dt);


%% Channelizer
input_data = input_data - mean(input_data); %Remove DC
chan_data = wola_channelizer(input_data,taps,n,m,0);


chan_data = reshape(chan_data, n,numel(chan_data)/n);

chan_data(:,end) = [];

figure;
imagesc(db(abs(chan_data)));
title('Waterfall')
ylabel('Channel #')
xlabel('Time')

%% Detection Logic

%Simple detection logic. Just look for amplitudes above a specific point.
%This is how many handheld radios work. They take advantage of the carrier
%tone on AM (DSB) modulation
amplitude_detect = 110;

detects = zeros(n,1);

chan_data_power = abs(chan_data);
chan_data_power_logic = db(chan_data_power) > amplitude_detect;




%% Demodulate

%using PLL
dt = 1/(bw/m);
target_freq = BB_offset; %Found experimentally
target_data = chan_data(target_chan,:).* exp(1j*2*pi*dt*[1:length(chan_data(target_chan,:))]*target_freq);

%filter
bb_filter = ChannelBasebandFilter;
filtered_data = conv(target_data,bb_filter.Numerator,'same');

%Grab phase of first detect
demod_ang_diff = unwrap(angle(filtered_data))/(2*pi*1/(bw/m));
demod_outpt = demod_ang_diff(2:end)-demod_ang_diff(1:end-1);

demod_resampled = resample(demod_outpt,11025,round(bw/(2*m)));




soundsc(demod_resampled,11025);
